{"version":3,"sources":["Components/FeedbackSection/FeedbackSection.jsx","Components/FeedbackStatistics/FeedbackStatistics.jsx","Components/Statistics/Statistics.jsx","Components/App.js","index.js"],"names":["FeedbackSection","changeValue","type","name","onClick","FeedbackStatistics","good","bad","neutral","total","percent","NotificationMessage","isNaN","Math","round","Statistics","state","e","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","number","countPositiveFeedbackPercentage","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"2NAqBeA,EAnBS,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACzB,OACE,oCACE,6BACE,4DACA,4BAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,GAA3C,QAGA,4BAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,GAA9C,WAGA,4BAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,GAA1C,UCmBOI,EA9BY,SAAC,GAOrB,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,IACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,QACAC,EACI,EADJA,oBAEA,OACE,oCACE,6BACE,yCACW,IAAVF,EACCE,EAEA,4BACE,wBAAIR,KAAMG,GAAV,SAAuBA,GACvB,wBAAIH,KAAMK,GAAV,aAA8BA,EAA9B,KACA,wBAAIL,KAAMI,GAAV,SAAsBA,EAAtB,KACA,sCAAYE,EAAZ,KACA,kDACsBG,MAAMF,GAAW,EAAIG,KAAKC,MAAMJ,GADtD,SCkCGK,E,4MAlDbC,MAAQ,CACNV,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAGPN,YAAc,SAACgB,GAEb,IAAMd,EAAOc,EAAEC,OAAOf,KACtB,EAAKgB,UAAS,SAACC,GACb,OAAO,eAAGjB,EAAOiB,EAAUjB,GAAQ,O,EAIvCkB,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAE5C,OADAD,GAAYC,IAEX,I,EAGLC,gCAAkC,WAChC,OAAQ,EAAKX,MAAMV,KAAO,EAAKe,qBAAwB,K,uDAG/C,IAAD,EACwBO,KAAKZ,MAA5BV,EADD,EACCA,KAAME,EADP,EACOA,QAASD,EADhB,EACgBA,IACjBE,EAAQmB,KAAKP,qBACbX,EAAUkB,KAAKD,gCACnBlB,EACAmB,KAAKZ,MAAMV,MAIb,OACE,oCACE,kBAAC,EAAD,CAAiBL,YAAa2B,KAAK3B,cACnC,kBAAC,EAAD,CACEK,KAAMA,EACNC,IAAKA,EACLC,QAASA,EACTE,QAASA,EACTD,MAAOA,EACPE,oBAXsB,2B,GAjCPkB,aCMVC,EARH,WACV,OACE,oCACE,kBAAC,EAAD,QCFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.454c9565.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FeedbackSection = ({ changeValue }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2> \"Please, leave a feedback\" </h2>\r\n        <button type=\"button\" name=\"good\" onClick={changeValue}>\r\n          Good\r\n        </button>\r\n        <button type=\"button\" name=\"neutral\" onClick={changeValue}>\r\n          Neutral\r\n        </button>\r\n        <button type=\"button\" name=\"bad\" onClick={changeValue}>\r\n          Bad\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackSection;\r\n","import React from \"react\";\r\n\r\nconst FeedbackStatistics = ({\r\n  good,\r\n  bad,\r\n  neutral,\r\n  total,\r\n  percent,\r\n  NotificationMessage,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <p>Statistics</p>\r\n        {total === 0 ? (\r\n          NotificationMessage\r\n        ) : (\r\n          <ul>\r\n            <li name={good}> Good:{good}</li>\r\n            <li name={neutral}> Neutral: {neutral} </li>\r\n            <li name={bad}> Bad: {bad} </li>\r\n            <li> Total:{total} </li>\r\n            <li>\r\n              Positive feedback: {isNaN(percent) ? 0 : Math.round(percent)}%\r\n            </li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackStatistics;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FeedbackSection from \"../FeedbackSection/FeedbackSection\";\r\nimport FeedbackStatistics from \"../FeedbackStatistics/FeedbackStatistics\";\r\n\r\nclass Statistics extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  changeValue = (e) => {\r\n    // console.log(e);\r\n    const name = e.target.name;\r\n    this.setState((prevState) => {\r\n      return { [name]: prevState[name] + 1 };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, number) => {\r\n      acc = acc + number;\r\n      return acc;\r\n    }, 0);\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    return (this.state.good / this.countTotalFeedback()) * 100;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const percent = this.countPositiveFeedbackPercentage(\r\n      total,\r\n      this.state.good\r\n    );\r\n    const NotificationMessage = \"No feedback given\";\r\n\r\n    return (\r\n      <>\r\n        <FeedbackSection changeValue={this.changeValue} />\r\n        <FeedbackStatistics\r\n          good={good}\r\n          bad={bad}\r\n          neutral={neutral}\r\n          percent={percent}\r\n          total={total}\r\n          NotificationMessage={NotificationMessage}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  total: PropTypes.number,\r\n  percent: PropTypes.number,\r\n  changeValue: PropTypes.func,\r\n};\r\n","import React from \"react\";\nimport Statistics from \"./Statistics/Statistics\";\n\nconst App = () => {\n  return (\n    <>\n      <Statistics />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}